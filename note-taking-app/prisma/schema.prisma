// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum NoteStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
}

// Auth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String? // For email/password authentication
  accounts      Account[]
  sessions      Session[]

  // App-specific fields
  notes      Note[]
  categories Category[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// App models
model Note {
  id        String     @id @default(cuid())
  title     String
  content   String     @db.Text
  status    NoteStatus @default(DRAFT)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)

  tags NoteTag[]

  @@index([status])
  @@map("notes")
}

model Category {
  id          String   @id @default(cuid())
  name        String
  description String?
  color       String   @default("#3B82F6") // Default blue color
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  notes  Note[]

  @@unique([name, userId]) // Unique category name per user
  @@map("categories")
}

model Tag {
  id    String @id @default(cuid())
  name  String @unique
  color String // Hex color code

  // Relations
  notes NoteTag[]

  @@map("tags")
}

// Junction table for many-to-many relationship between Notes and Tags
model NoteTag {
  id     String @id @default(cuid())
  noteId String
  tagId  String

  note Note @relation(fields: [noteId], references: [id], onDelete: Cascade)
  tag  Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([noteId, tagId])
  @@map("note_tags")
}

// Productivity Models
model DailyNote {
  id        String   @id @default(cuid())
  date      DateTime @unique
  content   String   @db.Text
  mood      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([date])
  @@map("daily_notes")
}

model Task {
  id          String       @id @default(cuid())
  title       String
  description String?      @db.Text
  completed   Boolean      @default(false)
  priority    TaskPriority @default(LOW)
  dueDate     DateTime?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Relations
  projectId String?
  project   Project? @relation(fields: [projectId], references: [id], onDelete: SetNull)

  @@index([completed])
  @@index([dueDate])
  @@map("tasks")
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String?  @db.Text
  status      String
  progress    Int      @default(0) // Percentage 0-100
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  tasks Task[]

  @@map("projects")
}

// Knowledge Models
model Template {
  id          String   @id @default(cuid())
  name        String
  description String?
  content     String   @db.Text
  category    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("templates")
}

model KnowledgeArticle {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  category  String?
  tags      String[] // Array of tag names
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([category])
  @@map("knowledge_articles")
}
