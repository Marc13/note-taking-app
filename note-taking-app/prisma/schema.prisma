// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum NoteStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

// Auth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  
  // App-specific fields
  notes         Note[]
  categories    Category[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// App models
model Note {
  id          String     @id @default(cuid())
  title       String
  content     String     @db.Text
  status      NoteStatus @default(DRAFT)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  // Relations
  userId      String
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  categoryId  String?
  category    Category?  @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  
  tags        NoteTags[]

  @@map("notes")
}

model Category {
  id          String   @id @default(cuid())
  name        String
  description String?
  color       String   @default("#3B82F6") // Default blue color
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  notes       Note[]

  @@unique([name, userId]) // Unique category name per user
  @@map("categories")
}

model Tag {
  id        String     @id @default(cuid())
  name      String     @unique
  color     String     @default("#6B7280") // Default gray color
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  
  // Relations
  notes     NoteTags[]

  @@map("tags")
}

// Junction table for many-to-many relationship between Notes and Tags
model NoteTags {
  id     String @id @default(cuid())
  noteId String
  tagId  String
  
  note   Note   @relation(fields: [noteId], references: [id], onDelete: Cascade)
  tag    Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([noteId, tagId])
  @@map("note_tags")
}
